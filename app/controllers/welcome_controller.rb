class WelcomeController < ApplicationController
  require 'encrypt.rb'
  require 'net/https'
  require 'open-uri'
  require 'json'
  #################################################################
  # Это - контроллер, который будет принимать ajax-запросы из view#
  # и обрабатывать их, а потом отсылать данные через JSON.        #
  # Обращаться он будет к классу Encrypts, его полям и методам.   #
  #################################################################
  def index


  end
  #################################################################
  # Этот метод проверяет, является ли введенный текст щифром, и   #
  # принимает он массив params                                    #
  #################################################################
  def checkCrypted(params)
    @text=params[:text]
    #получаем переданное значение с именем "text" и присваиваем его переменной @text
    @en=Encrypts.new
    #создаем новый экземпляр класса Encrypts
    @analys_symbol=@en.DetectEncr(@text)
    #получаем массив, где в алфавитном порядке расположены частоты символов, т.е. @analys_symbol[0] соответствует частоте
    #аоявления в тексте буквы "а"
    @symbolIndex=@analys_symbol.index(@analys_symbol.max)
    #выясняем, какой же буквенный индекс соответствует букве с наибольшей частотой появления в тексте
    @maybe_rotate=@symbolIndex - $alphabet.index('e')
    #И путем вычитания буквенного индекса самой распространенной буквы английского алфавита - е из получившегося индекса
    #мы узнаем вероятный сдвиг(который, если текст не является шифром, будет равен нулю)
    return @maybe_rotate
    #И возвращаем его
  end
  #################################################################
  #Этот метод обращается к методу checkCrypted, чтобы проверить,  #
  #является ли введенный текст шифром, после чего отсылает данные #
  #обратно в формате JSON                                         #
  #################################################################
  def check
    @isCrypted=false
    #инициализируем переменную @IsCripted значением false
    @m_rot= checkCrypted(params)
    #вызываем метод, который проверяет, является ли текст шифром и возвращает вероятное смещение
    if(@m_rot>0)
      #проверяем, является текст шифром, если смещение больше нуля - то есть, если оно есть, присваиваем переменной
      #@isCrypted значение true
      @isCrypted=true
    end
    respond_to do |format|
      format.json {
        render json: {:encr=>@isCrypted, :rot=>@maybe_rotate, :ratearr =>$rate, :alphabet =>$alphabet}

      }
      #передаем полученные данные в формате JSON, где :encr - является ли текст шифром, :rot - вероятное смещение,
      #:ratearr - массив с частотами символов, :alphabet - алфавитный массив
    end

  end
  #################################################################
  #Метод, который обрабатывает введенный текст и смещение, создает
  #экземлпяр класса Encrypt  и выполняет зашифровку/дешифровку, в
  #зависимости от того, какая кнопка была нажата, а в итоге
  #отправляет данные в формате JSON
  #################################################################
  def crypt


    text = params[:text]
    rot = params[:rot].to_i
    crypt=params[:crypt]
    #получаем введенные данные, а так же то, какой вариант был выбран  -шифрования или дешифрование
    @en=Encrypts.new
    #создаем новый экземлпяр класса Encrypts
    if crypt =="encrypt"
      #если было выбрано ширование
      @words= @en.Encrypt(text, rot)
      #вызываем метод Encrypt, и получаем зашифрованный текст
      texts=Text.new(inputtext: text, rotate: rot, crypttext: @words)
      texts.save
      #который вместе с исходным текстом и смещением сохраняем в базе данных
    elsif crypt=="decrypt"
      #иначе же, если было выбрано дешифрование
      @words= @en.Decrypt(text, rot)
      #дешифруем и получаем исходный текст
      if (Text.find_by_crypttext(text))
        #проверяем, имеется ли введенный шифр уже в базе, если да, то не добавляем
      else
        texts=Text.new(inputtext: @words, rotate: rot, crypttext: text)
        texts.save
        #если нет, то добавляем в базу данных
      end
      end


    @m_rot= checkCrypted(params)
    @isCrypted=false
    if(@m_rot>0)
      @isCrypted=true
    end
    # определяем, шифр ли это, и если шифр, то вычисляем смещение
    respond_to do |format|
        format.json {
        render json: {:crypt => @words,:rot=>@m_rot,:encr=>@isCrypted, :ratearr =>$rate, :alphabet =>$alphabet}

      }
    end
    #отправляем  данные в формате json, где :crypt-расшифрованный(или зашифрованный текст, :encr - является ли введенный
    #текст шифром, :rot - вероятное смещение, :ratearr - массив с частотами символов, :alphabet - алфавитный массив
  end

end
